import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.Timer;


public class SortersView extends JPanel 
{

	private static final long serialVersionUID = 1L;
	private Tower[] originalTA;
	private Tower[] TA;
	private Timer timer;
	private int counter, intIndex;
	private int[] intArray;
	private Sorters sorters = new Sorters();

	public SortersView(Tower[] TA)
	{
		this.TA=TA;
		this.originalTA=TA;
	}

	//paints the towers to the screen
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);
		Graphics2D g2=(Graphics2D) g;

		for (int i = 0; i < TA.length; i++) 
		{
			g2.setColor(TA[i].getColor());
			g2.fill(TA[i]);
		}

	}

	//update the tower array, every time he update the array to the array after an insertion sorting step 
	public void start(String sorter)
	{
		counter=0;

		timer = new Timer(200, new ActionListener() 
		{

			@Override
			public void actionPerformed(ActionEvent arg0) 
			{
				fillIntArray(TA);
				if(sorter.equals("bubbleSort"))
					intArray=sorters.bubbleSort(intArray);
				else if(sorter.equals("insertionSort"))
					intArray=sorters.insertionSort(intArray);
				intIndex=sorters.getStepIndex();

				for (int i = 0; i < TA.length; i++)
				{
					if(i==intIndex)
					{
						TA[i].setColor(Color.red);
					}
					else
					{
						TA[i].setColor(Color.black);
					}
				}

				updateTowerArray(intArray);
				addToCounter();
				repaint();
				//printLogs();


				if(getSorters().isFinished()&&timer.isRunning())
				{
					System.out.println("\nfinished");
					timer.stop();
				}
			}

		});
		timer.setRepeats(true);
		timer.start();
	}



	public void printLogs()
	{
		if(!sorters.isFinished())
		{
			System.out.println("step "+counter+":");

			for (int i = 0; i < TA.length; i++) 
			{
				System.out.println("TA["+i+"]="+(int)TA[i].getHeight());
			}

			System.out.println();
		}
	}
	public void updateTowerArray(int[] intArray)
	{

		for (int i = 0; i < TA.length; i++) 
		{
			TA[i].setHeight(intArray[i]);
		}
	}

	public void fillIntArray(Tower[] TA)
	{
		intArray = new int[TA.length];

		for (int i = 0; i < TA.length; i++) 
		{
			intArray[i]=(int) TA[i].getHeight();
		}
	}

	public void addToCounter()
	{
		counter++;
	}

	public void showOriginal()
	{
		TA=originalTA;
		repaint();
	}

	public void setTA(Tower[] TA)
	{
		this.TA=TA;
	}

	public Sorters getSorters()
	{
		return this.sorters;
	}

	public Tower[] getTA()
	{
		return this.TA;
	}

}
